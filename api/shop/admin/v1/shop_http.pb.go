// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	mux "github.com/gorilla/mux"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(http.Request)
var _ = new(context.Context)
var _ = binding.MapProto
var _ = mux.NewRouter

const _ = http1.SupportPackageIsVersion1

type ShopAdminHandler interface {
	CreateBeer(context.Context, *CreateBeerReq) (*CreateBeerReply, error)

	DeleteBeer(context.Context, *DeleteBeerReq) (*DeleteBeerReply, error)

	GetCustomer(context.Context, *GetCustomerReq) (*GetCustomerReply, error)

	GetOrder(context.Context, *GetOrderReq) (*GetOrderReply, error)

	ListBeer(context.Context, *ListBeerReq) (*ListBeerReply, error)

	ListCustomer(context.Context, *ListCustomerReq) (*ListCustomerReply, error)

	ListOrder(context.Context, *ListOrderReq) (*ListOrderReply, error)

	Login(context.Context, *LoginReq) (*LoginReply, error)

	Logout(context.Context, *LogoutReq) (*LogoutReply, error)

	UpdateBeer(context.Context, *UpdateBeerReq) (*UpdateBeerReply, error)
}

func NewShopAdminHandler(srv ShopAdminHandler, opts ...http1.HandleOption) http.Handler {
	h := http1.DefaultHandleOptions()
	for _, o := range opts {
		o(&h)
	}
	r := mux.NewRouter()

	r.HandleFunc("/admin/v1/login", func(w http.ResponseWriter, r *http.Request) {
		var in LoginReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*LoginReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/admin/v1/logout", func(w http.ResponseWriter, r *http.Request) {
		var in LogoutReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*LogoutReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/admin/v1/catalog/beers", func(w http.ResponseWriter, r *http.Request) {
		var in ListBeerReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBeer(ctx, req.(*ListBeerReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*ListBeerReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("GET")

	r.HandleFunc("/admin/v1/catalog/beers", func(w http.ResponseWriter, r *http.Request) {
		var in CreateBeerReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBeer(ctx, req.(*CreateBeerReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*CreateBeerReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/admin/v1/catalog/beers/{id}", func(w http.ResponseWriter, r *http.Request) {
		var in UpdateBeerReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		if err := binding.BindVars(mux.Vars(r), &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBeer(ctx, req.(*UpdateBeerReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*UpdateBeerReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("PUT")

	r.HandleFunc("/admin/v1/catalog/beers/{id}", func(w http.ResponseWriter, r *http.Request) {
		var in DeleteBeerReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		if err := binding.BindVars(mux.Vars(r), &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBeer(ctx, req.(*DeleteBeerReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*DeleteBeerReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("DELETE")

	r.HandleFunc("/admin/v1/orders", func(w http.ResponseWriter, r *http.Request) {
		var in ListOrderReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOrder(ctx, req.(*ListOrderReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*ListOrderReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("GET")

	r.HandleFunc("/admin/v1/orders", func(w http.ResponseWriter, r *http.Request) {
		var in GetOrderReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrder(ctx, req.(*GetOrderReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*GetOrderReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("GET")

	r.HandleFunc("/admin/v1/customers", func(w http.ResponseWriter, r *http.Request) {
		var in ListCustomerReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCustomer(ctx, req.(*ListCustomerReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*ListCustomerReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("GET")

	r.HandleFunc("/admin/v1/customers/{id}", func(w http.ResponseWriter, r *http.Request) {
		var in GetCustomerReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		if err := binding.BindVars(mux.Vars(r), &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCustomer(ctx, req.(*GetCustomerReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*GetCustomerReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	return r
}

type ShopAdminHttpClient interface {
	CreateBeer(ctx context.Context, req *CreateBeerReq, opts ...http1.CallOption) (rsp *CreateBeerReply, err error)

	DeleteBeer(ctx context.Context, req *DeleteBeerReq, opts ...http1.CallOption) (rsp *DeleteBeerReply, err error)

	GetCustomer(ctx context.Context, req *GetCustomerReq, opts ...http1.CallOption) (rsp *GetCustomerReply, err error)

	GetOrder(ctx context.Context, req *GetOrderReq, opts ...http1.CallOption) (rsp *GetOrderReply, err error)

	ListBeer(ctx context.Context, req *ListBeerReq, opts ...http1.CallOption) (rsp *ListBeerReply, err error)

	ListCustomer(ctx context.Context, req *ListCustomerReq, opts ...http1.CallOption) (rsp *ListCustomerReply, err error)

	ListOrder(ctx context.Context, req *ListOrderReq, opts ...http1.CallOption) (rsp *ListOrderReply, err error)

	Login(ctx context.Context, req *LoginReq, opts ...http1.CallOption) (rsp *LoginReply, err error)

	Logout(ctx context.Context, req *LogoutReq, opts ...http1.CallOption) (rsp *LogoutReply, err error)

	UpdateBeer(ctx context.Context, req *UpdateBeerReq, opts ...http1.CallOption) (rsp *UpdateBeerReply, err error)
}

type ShopAdminHttpClientImpl struct {
	cc *http1.Client
}

func NewShopAdminHttpClient(client *http1.Client) ShopAdminHttpClient {
	return &ShopAdminHttpClientImpl{client}
}

func (c *ShopAdminHttpClientImpl) CreateBeer(ctx context.Context, in *CreateBeerReq, opts ...http1.CallOption) (out *CreateBeerReply, err error) {
	path := binding.EncodePath("POST", "/admin/v1/catalog/beers", in)
	out = &CreateBeerReply{}

	err = c.cc.Invoke(ctx, path, in, &out, http1.Method("POST"), http1.PathPattern("/admin/v1/catalog/beers"))

	if err != nil {
		return
	}
	return
}

func (c *ShopAdminHttpClientImpl) DeleteBeer(ctx context.Context, in *DeleteBeerReq, opts ...http1.CallOption) (out *DeleteBeerReply, err error) {
	path := binding.EncodePath("DELETE", "/admin/v1/catalog/beers/{id}", in)
	out = &DeleteBeerReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("DELETE"), http1.PathPattern("/admin/v1/catalog/beers/{id}"))

	if err != nil {
		return
	}
	return
}

func (c *ShopAdminHttpClientImpl) GetCustomer(ctx context.Context, in *GetCustomerReq, opts ...http1.CallOption) (out *GetCustomerReply, err error) {
	path := binding.EncodePath("POST", "/admin/v1/customers/{id}", in)
	out = &GetCustomerReply{}

	err = c.cc.Invoke(ctx, path, in, &out, http1.Method("POST"), http1.PathPattern("/admin/v1/customers/{id}"))

	if err != nil {
		return
	}
	return
}

func (c *ShopAdminHttpClientImpl) GetOrder(ctx context.Context, in *GetOrderReq, opts ...http1.CallOption) (out *GetOrderReply, err error) {
	path := binding.EncodePath("GET", "/admin/v1/orders", in)
	out = &GetOrderReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("GET"), http1.PathPattern("/admin/v1/orders"))

	if err != nil {
		return
	}
	return
}

func (c *ShopAdminHttpClientImpl) ListBeer(ctx context.Context, in *ListBeerReq, opts ...http1.CallOption) (out *ListBeerReply, err error) {
	path := binding.EncodePath("GET", "/admin/v1/catalog/beers", in)
	out = &ListBeerReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("GET"), http1.PathPattern("/admin/v1/catalog/beers"))

	if err != nil {
		return
	}
	return
}

func (c *ShopAdminHttpClientImpl) ListCustomer(ctx context.Context, in *ListCustomerReq, opts ...http1.CallOption) (out *ListCustomerReply, err error) {
	path := binding.EncodePath("GET", "/admin/v1/customers", in)
	out = &ListCustomerReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("GET"), http1.PathPattern("/admin/v1/customers"))

	if err != nil {
		return
	}
	return
}

func (c *ShopAdminHttpClientImpl) ListOrder(ctx context.Context, in *ListOrderReq, opts ...http1.CallOption) (out *ListOrderReply, err error) {
	path := binding.EncodePath("GET", "/admin/v1/orders", in)
	out = &ListOrderReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("GET"), http1.PathPattern("/admin/v1/orders"))

	if err != nil {
		return
	}
	return
}

func (c *ShopAdminHttpClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http1.CallOption) (out *LoginReply, err error) {
	path := binding.EncodePath("POST", "/admin/v1/login", in)
	out = &LoginReply{}

	err = c.cc.Invoke(ctx, path, in, &out, http1.Method("POST"), http1.PathPattern("/admin/v1/login"))

	if err != nil {
		return
	}
	return
}

func (c *ShopAdminHttpClientImpl) Logout(ctx context.Context, in *LogoutReq, opts ...http1.CallOption) (out *LogoutReply, err error) {
	path := binding.EncodePath("POST", "/admin/v1/logout", in)
	out = &LogoutReply{}

	err = c.cc.Invoke(ctx, path, in, &out, http1.Method("POST"), http1.PathPattern("/admin/v1/logout"))

	if err != nil {
		return
	}
	return
}

func (c *ShopAdminHttpClientImpl) UpdateBeer(ctx context.Context, in *UpdateBeerReq, opts ...http1.CallOption) (out *UpdateBeerReply, err error) {
	path := binding.EncodePath("PUT", "/admin/v1/catalog/beers/{id}", in)
	out = &UpdateBeerReply{}

	err = c.cc.Invoke(ctx, path, in, &out, http1.Method("PUT"), http1.PathPattern("/admin/v1/catalog/beers/{id}"))

	if err != nil {
		return
	}
	return
}
