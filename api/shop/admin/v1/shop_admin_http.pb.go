// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	transport "github.com/go-kratos/kratos/v2/transport"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	mux "github.com/gorilla/mux"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(http.Request)
var _ = new(context.Context)
var _ = new(middleware.Middleware)
var _ = new(transport.Transporter)
var _ = binding.BindVars
var _ = mux.NewRouter

const _ = http1.SupportPackageIsVersion1

type ShopAdminHandler interface {
	CreateBeer(context.Context, *CreateBeerReq) (*CreateBeerReply, error)

	DeleteBeer(context.Context, *DeleteBeerReq) (*DeleteBeerReply, error)

	GetCustomer(context.Context, *GetCustomerReq) (*GetCustomerReply, error)

	GetOrder(context.Context, *GetOrderReq) (*GetOrderReply, error)

	ListBeer(context.Context, *ListBeerReq) (*ListBeerReply, error)

	ListCustomer(context.Context, *ListCustomerReq) (*ListCustomerReply, error)

	ListOrder(context.Context, *ListOrderReq) (*ListOrderReply, error)

	Login(context.Context, *LoginReq) (*LoginReply, error)

	Logout(context.Context, *LogoutReq) (*LogoutReply, error)

	UpdateBeer(context.Context, *UpdateBeerReq) (*UpdateBeerReply, error)
}

func NewShopAdminHandler(srv ShopAdminHandler, opts ...http1.HandleOption) http.Handler {
	h := http1.DefaultHandleOptions()
	for _, o := range opts {
		o(&h)
	}
	r := mux.NewRouter()

	r.HandleFunc("/admin/v1/login", func(w http.ResponseWriter, r *http.Request) {
		var in LoginReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		ctx := r.Context()
		transport.SetMethod(ctx, "/shop.admin.v1.ShopAdmin/Login")
		out, err := next(ctx, &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*LoginReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/admin/v1/logout", func(w http.ResponseWriter, r *http.Request) {
		var in LogoutReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		ctx := r.Context()
		transport.SetMethod(ctx, "/shop.admin.v1.ShopAdmin/Logout")
		out, err := next(ctx, &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*LogoutReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/admin/v1/catalog/beers", func(w http.ResponseWriter, r *http.Request) {
		var in ListBeerReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBeer(ctx, req.(*ListBeerReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		ctx := r.Context()
		transport.SetMethod(ctx, "/shop.admin.v1.ShopAdmin/ListBeer")
		out, err := next(ctx, &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*ListBeerReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("GET")

	r.HandleFunc("/admin/v1/catalog/beers", func(w http.ResponseWriter, r *http.Request) {
		var in CreateBeerReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBeer(ctx, req.(*CreateBeerReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		ctx := r.Context()
		transport.SetMethod(ctx, "/shop.admin.v1.ShopAdmin/CreateBeer")
		out, err := next(ctx, &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*CreateBeerReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/admin/v1/catalog/beers/{id}", func(w http.ResponseWriter, r *http.Request) {
		var in UpdateBeerReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		if err := binding.BindVars(mux.Vars(r), &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBeer(ctx, req.(*UpdateBeerReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		ctx := r.Context()
		transport.SetMethod(ctx, "/shop.admin.v1.ShopAdmin/UpdateBeer")
		out, err := next(ctx, &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*UpdateBeerReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("PUT")

	r.HandleFunc("/admin/v1/catalog/beers/{id}", func(w http.ResponseWriter, r *http.Request) {
		var in DeleteBeerReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		if err := binding.BindVars(mux.Vars(r), &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBeer(ctx, req.(*DeleteBeerReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		ctx := r.Context()
		transport.SetMethod(ctx, "/shop.admin.v1.ShopAdmin/DeleteBeer")
		out, err := next(ctx, &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*DeleteBeerReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("DELETE")

	r.HandleFunc("/admin/v1/orders", func(w http.ResponseWriter, r *http.Request) {
		var in ListOrderReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOrder(ctx, req.(*ListOrderReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		ctx := r.Context()
		transport.SetMethod(ctx, "/shop.admin.v1.ShopAdmin/ListOrder")
		out, err := next(ctx, &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*ListOrderReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("GET")

	r.HandleFunc("/admin/v1/orders", func(w http.ResponseWriter, r *http.Request) {
		var in GetOrderReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrder(ctx, req.(*GetOrderReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		ctx := r.Context()
		transport.SetMethod(ctx, "/shop.admin.v1.ShopAdmin/GetOrder")
		out, err := next(ctx, &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*GetOrderReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("GET")

	r.HandleFunc("/admin/v1/customers", func(w http.ResponseWriter, r *http.Request) {
		var in ListCustomerReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCustomer(ctx, req.(*ListCustomerReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		ctx := r.Context()
		transport.SetMethod(ctx, "/shop.admin.v1.ShopAdmin/ListCustomer")
		out, err := next(ctx, &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*ListCustomerReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("GET")

	r.HandleFunc("/admin/v1/customers/{id}", func(w http.ResponseWriter, r *http.Request) {
		var in GetCustomerReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		if err := binding.BindVars(mux.Vars(r), &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCustomer(ctx, req.(*GetCustomerReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		ctx := r.Context()
		transport.SetMethod(ctx, "/shop.admin.v1.ShopAdmin/GetCustomer")
		out, err := next(ctx, &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*GetCustomerReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	return r
}

type ShopAdminHTTPClient interface {
	CreateBeer(ctx context.Context, req *CreateBeerReq, opts ...http1.CallOption) (rsp *CreateBeerReply, err error)

	DeleteBeer(ctx context.Context, req *DeleteBeerReq, opts ...http1.CallOption) (rsp *DeleteBeerReply, err error)

	GetCustomer(ctx context.Context, req *GetCustomerReq, opts ...http1.CallOption) (rsp *GetCustomerReply, err error)

	GetOrder(ctx context.Context, req *GetOrderReq, opts ...http1.CallOption) (rsp *GetOrderReply, err error)

	ListBeer(ctx context.Context, req *ListBeerReq, opts ...http1.CallOption) (rsp *ListBeerReply, err error)

	ListCustomer(ctx context.Context, req *ListCustomerReq, opts ...http1.CallOption) (rsp *ListCustomerReply, err error)

	ListOrder(ctx context.Context, req *ListOrderReq, opts ...http1.CallOption) (rsp *ListOrderReply, err error)

	Login(ctx context.Context, req *LoginReq, opts ...http1.CallOption) (rsp *LoginReply, err error)

	Logout(ctx context.Context, req *LogoutReq, opts ...http1.CallOption) (rsp *LogoutReply, err error)

	UpdateBeer(ctx context.Context, req *UpdateBeerReq, opts ...http1.CallOption) (rsp *UpdateBeerReply, err error)
}

type ShopAdminHTTPClientImpl struct {
	cc *http1.Client
}

func NewShopAdminHTTPClient(client *http1.Client) ShopAdminHTTPClient {
	return &ShopAdminHTTPClientImpl{client}
}

func (c *ShopAdminHTTPClientImpl) CreateBeer(ctx context.Context, in *CreateBeerReq, opts ...http1.CallOption) (*CreateBeerReply, error) {
	var out CreateBeerReply
	path := binding.EncodePath("POST", "/admin/v1/catalog/beers", in)
	opts = append(opts, http1.Method("/shop.admin.v1.ShopAdmin/CreateBeer"))

	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)

	return &out, err
}

func (c *ShopAdminHTTPClientImpl) DeleteBeer(ctx context.Context, in *DeleteBeerReq, opts ...http1.CallOption) (*DeleteBeerReply, error) {
	var out DeleteBeerReply
	path := binding.EncodePath("DELETE", "/admin/v1/catalog/beers/{id}", in)
	opts = append(opts, http1.Method("/shop.admin.v1.ShopAdmin/DeleteBeer"))

	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)

	return &out, err
}

func (c *ShopAdminHTTPClientImpl) GetCustomer(ctx context.Context, in *GetCustomerReq, opts ...http1.CallOption) (*GetCustomerReply, error) {
	var out GetCustomerReply
	path := binding.EncodePath("POST", "/admin/v1/customers/{id}", in)
	opts = append(opts, http1.Method("/shop.admin.v1.ShopAdmin/GetCustomer"))

	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)

	return &out, err
}

func (c *ShopAdminHTTPClientImpl) GetOrder(ctx context.Context, in *GetOrderReq, opts ...http1.CallOption) (*GetOrderReply, error) {
	var out GetOrderReply
	path := binding.EncodePath("GET", "/admin/v1/orders", in)
	opts = append(opts, http1.Method("/shop.admin.v1.ShopAdmin/GetOrder"))

	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)

	return &out, err
}

func (c *ShopAdminHTTPClientImpl) ListBeer(ctx context.Context, in *ListBeerReq, opts ...http1.CallOption) (*ListBeerReply, error) {
	var out ListBeerReply
	path := binding.EncodePath("GET", "/admin/v1/catalog/beers", in)
	opts = append(opts, http1.Method("/shop.admin.v1.ShopAdmin/ListBeer"))

	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)

	return &out, err
}

func (c *ShopAdminHTTPClientImpl) ListCustomer(ctx context.Context, in *ListCustomerReq, opts ...http1.CallOption) (*ListCustomerReply, error) {
	var out ListCustomerReply
	path := binding.EncodePath("GET", "/admin/v1/customers", in)
	opts = append(opts, http1.Method("/shop.admin.v1.ShopAdmin/ListCustomer"))

	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)

	return &out, err
}

func (c *ShopAdminHTTPClientImpl) ListOrder(ctx context.Context, in *ListOrderReq, opts ...http1.CallOption) (*ListOrderReply, error) {
	var out ListOrderReply
	path := binding.EncodePath("GET", "/admin/v1/orders", in)
	opts = append(opts, http1.Method("/shop.admin.v1.ShopAdmin/ListOrder"))

	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)

	return &out, err
}

func (c *ShopAdminHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http1.CallOption) (*LoginReply, error) {
	var out LoginReply
	path := binding.EncodePath("POST", "/admin/v1/login", in)
	opts = append(opts, http1.Method("/shop.admin.v1.ShopAdmin/Login"))

	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)

	return &out, err
}

func (c *ShopAdminHTTPClientImpl) Logout(ctx context.Context, in *LogoutReq, opts ...http1.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	path := binding.EncodePath("POST", "/admin/v1/logout", in)
	opts = append(opts, http1.Method("/shop.admin.v1.ShopAdmin/Logout"))

	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)

	return &out, err
}

func (c *ShopAdminHTTPClientImpl) UpdateBeer(ctx context.Context, in *UpdateBeerReq, opts ...http1.CallOption) (*UpdateBeerReply, error) {
	var out UpdateBeerReply
	path := binding.EncodePath("PUT", "/admin/v1/catalog/beers/{id}", in)
	opts = append(opts, http1.Method("/shop.admin.v1.ShopAdmin/UpdateBeer"))

	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)

	return &out, err
}
