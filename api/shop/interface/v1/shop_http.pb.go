// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	mux "github.com/gorilla/mux"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(http.Request)
var _ = new(context.Context)
var _ = binding.MapProto
var _ = mux.NewRouter

const _ = http1.SupportPackageIsVersion1

type ShopInterfaceHandler interface {
	AddCartItem(context.Context, *AddCartItemReq) (*AddCartItemReply, error)

	CreateAddress(context.Context, *CreateAddressReq) (*CreateAddressReply, error)

	CreateCard(context.Context, *CreateCardReq) (*CreateCardReply, error)

	CreateOrder(context.Context, *CreateOrderReq) (*CreateOrderReply, error)

	DeleteCard(context.Context, *DeleteCardReq) (*DeleteCardReply, error)

	GetAddress(context.Context, *GetAddressReq) (*GetAddressReply, error)

	GetBeer(context.Context, *GetBeerReq) (*GetBeerReply, error)

	GetCard(context.Context, *GetCardReq) (*GetCardReply, error)

	ListAddress(context.Context, *ListAddressReq) (*ListAddressReply, error)

	ListBeer(context.Context, *ListBeerReq) (*ListBeerReply, error)

	ListCard(context.Context, *ListCardReq) (*ListCardReply, error)

	ListCartItem(context.Context, *ListCartItemReq) (*ListCartItemReply, error)

	ListOrder(context.Context, *ListOrderReq) (*ListOrderReply, error)

	Login(context.Context, *LoginReq) (*LoginReply, error)

	Logout(context.Context, *LogoutReq) (*LogoutReply, error)

	Register(context.Context, *RegisterReq) (*RegisterReply, error)
}

func NewShopInterfaceHandler(srv ShopInterfaceHandler, opts ...http1.HandleOption) http.Handler {
	h := http1.DefaultHandleOptions()
	for _, o := range opts {
		o(&h)
	}
	r := mux.NewRouter()

	r.HandleFunc("/v1/register", func(w http.ResponseWriter, r *http.Request) {
		var in RegisterReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*RegisterReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/v1/login", func(w http.ResponseWriter, r *http.Request) {
		var in LoginReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*LoginReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/v1/logout", func(w http.ResponseWriter, r *http.Request) {
		var in LogoutReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*LogoutReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/v1/user/addresses", func(w http.ResponseWriter, r *http.Request) {
		var in ListAddressReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAddress(ctx, req.(*ListAddressReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*ListAddressReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("GET")

	r.HandleFunc("/v1/user/addresses", func(w http.ResponseWriter, r *http.Request) {
		var in CreateAddressReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAddress(ctx, req.(*CreateAddressReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*CreateAddressReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/v1/user/addresses/{id}", func(w http.ResponseWriter, r *http.Request) {
		var in GetAddressReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		if err := binding.BindVars(mux.Vars(r), &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAddress(ctx, req.(*GetAddressReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*GetAddressReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("GET")

	r.HandleFunc("/v1/user/cards", func(w http.ResponseWriter, r *http.Request) {
		var in ListCardReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCard(ctx, req.(*ListCardReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*ListCardReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("GET")

	r.HandleFunc("/v1/user/cards", func(w http.ResponseWriter, r *http.Request) {
		var in CreateCardReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCard(ctx, req.(*CreateCardReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*CreateCardReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/v1/user/cards/{id}", func(w http.ResponseWriter, r *http.Request) {
		var in GetCardReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		if err := binding.BindVars(mux.Vars(r), &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCard(ctx, req.(*GetCardReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*GetCardReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("GET")

	r.HandleFunc("/v1/user/cards/{id}", func(w http.ResponseWriter, r *http.Request) {
		var in DeleteCardReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		if err := binding.BindVars(mux.Vars(r), &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCard(ctx, req.(*DeleteCardReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*DeleteCardReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("DELETE")

	r.HandleFunc("/v1/catalog/beers", func(w http.ResponseWriter, r *http.Request) {
		var in ListBeerReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBeer(ctx, req.(*ListBeerReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*ListBeerReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("GET")

	r.HandleFunc("/v1/catalog/beers/{id}", func(w http.ResponseWriter, r *http.Request) {
		var in GetBeerReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		if err := binding.BindVars(mux.Vars(r), &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBeer(ctx, req.(*GetBeerReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*GetBeerReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("GET")

	r.HandleFunc("/v1/cart", func(w http.ResponseWriter, r *http.Request) {
		var in ListCartItemReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCartItem(ctx, req.(*ListCartItemReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*ListCartItemReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("GET")

	r.HandleFunc("/v1/cart", func(w http.ResponseWriter, r *http.Request) {
		var in AddCartItemReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddCartItem(ctx, req.(*AddCartItemReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*AddCartItemReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/v1/orders", func(w http.ResponseWriter, r *http.Request) {
		var in CreateOrderReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrder(ctx, req.(*CreateOrderReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*CreateOrderReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/v1/orders", func(w http.ResponseWriter, r *http.Request) {
		var in ListOrderReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOrder(ctx, req.(*ListOrderReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*ListOrderReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("GET")

	return r
}

type ShopInterfaceHttpClient interface {
	AddCartItem(ctx context.Context, req *AddCartItemReq, opts ...http1.CallOption) (rsp *AddCartItemReply, err error)

	CreateAddress(ctx context.Context, req *CreateAddressReq, opts ...http1.CallOption) (rsp *CreateAddressReply, err error)

	CreateCard(ctx context.Context, req *CreateCardReq, opts ...http1.CallOption) (rsp *CreateCardReply, err error)

	CreateOrder(ctx context.Context, req *CreateOrderReq, opts ...http1.CallOption) (rsp *CreateOrderReply, err error)

	DeleteCard(ctx context.Context, req *DeleteCardReq, opts ...http1.CallOption) (rsp *DeleteCardReply, err error)

	GetAddress(ctx context.Context, req *GetAddressReq, opts ...http1.CallOption) (rsp *GetAddressReply, err error)

	GetBeer(ctx context.Context, req *GetBeerReq, opts ...http1.CallOption) (rsp *GetBeerReply, err error)

	GetCard(ctx context.Context, req *GetCardReq, opts ...http1.CallOption) (rsp *GetCardReply, err error)

	ListAddress(ctx context.Context, req *ListAddressReq, opts ...http1.CallOption) (rsp *ListAddressReply, err error)

	ListBeer(ctx context.Context, req *ListBeerReq, opts ...http1.CallOption) (rsp *ListBeerReply, err error)

	ListCard(ctx context.Context, req *ListCardReq, opts ...http1.CallOption) (rsp *ListCardReply, err error)

	ListCartItem(ctx context.Context, req *ListCartItemReq, opts ...http1.CallOption) (rsp *ListCartItemReply, err error)

	ListOrder(ctx context.Context, req *ListOrderReq, opts ...http1.CallOption) (rsp *ListOrderReply, err error)

	Login(ctx context.Context, req *LoginReq, opts ...http1.CallOption) (rsp *LoginReply, err error)

	Logout(ctx context.Context, req *LogoutReq, opts ...http1.CallOption) (rsp *LogoutReply, err error)

	Register(ctx context.Context, req *RegisterReq, opts ...http1.CallOption) (rsp *RegisterReply, err error)
}

type ShopInterfaceHttpClientImpl struct {
	cc *http1.Client
}

func NewShopInterfaceHttpClient(client *http1.Client) ShopInterfaceHttpClient {
	return &ShopInterfaceHttpClientImpl{client}
}

func (c *ShopInterfaceHttpClientImpl) AddCartItem(ctx context.Context, in *AddCartItemReq, opts ...http1.CallOption) (out *AddCartItemReply, err error) {
	path := binding.EncodePath("POST", "/v1/cart", in)
	out = &AddCartItemReply{}

	err = c.cc.Invoke(ctx, path, in, &out, http1.Method("POST"), http1.PathPattern("/v1/cart"))

	if err != nil {
		return
	}
	return
}

func (c *ShopInterfaceHttpClientImpl) CreateAddress(ctx context.Context, in *CreateAddressReq, opts ...http1.CallOption) (out *CreateAddressReply, err error) {
	path := binding.EncodePath("POST", "/v1/user/addresses", in)
	out = &CreateAddressReply{}

	err = c.cc.Invoke(ctx, path, in, &out, http1.Method("POST"), http1.PathPattern("/v1/user/addresses"))

	if err != nil {
		return
	}
	return
}

func (c *ShopInterfaceHttpClientImpl) CreateCard(ctx context.Context, in *CreateCardReq, opts ...http1.CallOption) (out *CreateCardReply, err error) {
	path := binding.EncodePath("POST", "/v1/user/cards", in)
	out = &CreateCardReply{}

	err = c.cc.Invoke(ctx, path, in, &out, http1.Method("POST"), http1.PathPattern("/v1/user/cards"))

	if err != nil {
		return
	}
	return
}

func (c *ShopInterfaceHttpClientImpl) CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...http1.CallOption) (out *CreateOrderReply, err error) {
	path := binding.EncodePath("POST", "/v1/orders", in)
	out = &CreateOrderReply{}

	err = c.cc.Invoke(ctx, path, in, &out, http1.Method("POST"), http1.PathPattern("/v1/orders"))

	if err != nil {
		return
	}
	return
}

func (c *ShopInterfaceHttpClientImpl) DeleteCard(ctx context.Context, in *DeleteCardReq, opts ...http1.CallOption) (out *DeleteCardReply, err error) {
	path := binding.EncodePath("DELETE", "/v1/user/cards/{id}", in)
	out = &DeleteCardReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("DELETE"), http1.PathPattern("/v1/user/cards/{id}"))

	if err != nil {
		return
	}
	return
}

func (c *ShopInterfaceHttpClientImpl) GetAddress(ctx context.Context, in *GetAddressReq, opts ...http1.CallOption) (out *GetAddressReply, err error) {
	path := binding.EncodePath("GET", "/v1/user/addresses/{id}", in)
	out = &GetAddressReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("GET"), http1.PathPattern("/v1/user/addresses/{id}"))

	if err != nil {
		return
	}
	return
}

func (c *ShopInterfaceHttpClientImpl) GetBeer(ctx context.Context, in *GetBeerReq, opts ...http1.CallOption) (out *GetBeerReply, err error) {
	path := binding.EncodePath("GET", "/v1/catalog/beers/{id}", in)
	out = &GetBeerReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("GET"), http1.PathPattern("/v1/catalog/beers/{id}"))

	if err != nil {
		return
	}
	return
}

func (c *ShopInterfaceHttpClientImpl) GetCard(ctx context.Context, in *GetCardReq, opts ...http1.CallOption) (out *GetCardReply, err error) {
	path := binding.EncodePath("GET", "/v1/user/cards/{id}", in)
	out = &GetCardReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("GET"), http1.PathPattern("/v1/user/cards/{id}"))

	if err != nil {
		return
	}
	return
}

func (c *ShopInterfaceHttpClientImpl) ListAddress(ctx context.Context, in *ListAddressReq, opts ...http1.CallOption) (out *ListAddressReply, err error) {
	path := binding.EncodePath("GET", "/v1/user/addresses", in)
	out = &ListAddressReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("GET"), http1.PathPattern("/v1/user/addresses"))

	if err != nil {
		return
	}
	return
}

func (c *ShopInterfaceHttpClientImpl) ListBeer(ctx context.Context, in *ListBeerReq, opts ...http1.CallOption) (out *ListBeerReply, err error) {
	path := binding.EncodePath("GET", "/v1/catalog/beers", in)
	out = &ListBeerReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("GET"), http1.PathPattern("/v1/catalog/beers"))

	if err != nil {
		return
	}
	return
}

func (c *ShopInterfaceHttpClientImpl) ListCard(ctx context.Context, in *ListCardReq, opts ...http1.CallOption) (out *ListCardReply, err error) {
	path := binding.EncodePath("GET", "/v1/user/cards", in)
	out = &ListCardReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("GET"), http1.PathPattern("/v1/user/cards"))

	if err != nil {
		return
	}
	return
}

func (c *ShopInterfaceHttpClientImpl) ListCartItem(ctx context.Context, in *ListCartItemReq, opts ...http1.CallOption) (out *ListCartItemReply, err error) {
	path := binding.EncodePath("GET", "/v1/cart", in)
	out = &ListCartItemReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("GET"), http1.PathPattern("/v1/cart"))

	if err != nil {
		return
	}
	return
}

func (c *ShopInterfaceHttpClientImpl) ListOrder(ctx context.Context, in *ListOrderReq, opts ...http1.CallOption) (out *ListOrderReply, err error) {
	path := binding.EncodePath("GET", "/v1/orders", in)
	out = &ListOrderReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("GET"), http1.PathPattern("/v1/orders"))

	if err != nil {
		return
	}
	return
}

func (c *ShopInterfaceHttpClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http1.CallOption) (out *LoginReply, err error) {
	path := binding.EncodePath("POST", "/v1/login", in)
	out = &LoginReply{}

	err = c.cc.Invoke(ctx, path, in, &out, http1.Method("POST"), http1.PathPattern("/v1/login"))

	if err != nil {
		return
	}
	return
}

func (c *ShopInterfaceHttpClientImpl) Logout(ctx context.Context, in *LogoutReq, opts ...http1.CallOption) (out *LogoutReply, err error) {
	path := binding.EncodePath("POST", "/v1/logout", in)
	out = &LogoutReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/v1/logout"))

	if err != nil {
		return
	}
	return
}

func (c *ShopInterfaceHttpClientImpl) Register(ctx context.Context, in *RegisterReq, opts ...http1.CallOption) (out *RegisterReply, err error) {
	path := binding.EncodePath("POST", "/v1/register", in)
	out = &RegisterReply{}

	err = c.cc.Invoke(ctx, path, in, &out, http1.Method("POST"), http1.PathPattern("/v1/register"))

	if err != nil {
		return
	}
	return
}
