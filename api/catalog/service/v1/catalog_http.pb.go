// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	mux "github.com/gorilla/mux"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(http.Request)
var _ = new(context.Context)
var _ = binding.MapProto
var _ = mux.NewRouter

const _ = http1.SupportPackageIsVersion1

type CatalogHandler interface {
	CreateBeer(context.Context, *CreateBeerReq) (*CreateBeerReply, error)

	DeleteBeer(context.Context, *DeleteBeerReq) (*DeleteBeerReply, error)

	GetBeer(context.Context, *GetBeerReq) (*GetBeerReply, error)

	ListBeer(context.Context, *ListBeerReq) (*ListBeerReply, error)

	UpdateBeer(context.Context, *UpdateBeerReq) (*UpdateBeerReply, error)
}

func NewCatalogHandler(srv CatalogHandler, opts ...http1.HandleOption) http.Handler {
	h := http1.DefaultHandleOptions()
	for _, o := range opts {
		o(&h)
	}
	r := mux.NewRouter()

	r.HandleFunc("/catalog.service.v1.Catalog/ListBeer", func(w http.ResponseWriter, r *http.Request) {
		var in ListBeerReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBeer(ctx, req.(*ListBeerReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*ListBeerReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/catalog.service.v1.Catalog/CreateBeer", func(w http.ResponseWriter, r *http.Request) {
		var in CreateBeerReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBeer(ctx, req.(*CreateBeerReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*CreateBeerReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/catalog.service.v1.Catalog/GetBeer", func(w http.ResponseWriter, r *http.Request) {
		var in GetBeerReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBeer(ctx, req.(*GetBeerReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*GetBeerReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/catalog.service.v1.Catalog/UpdateBeer", func(w http.ResponseWriter, r *http.Request) {
		var in UpdateBeerReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBeer(ctx, req.(*UpdateBeerReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*UpdateBeerReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/catalog.service.v1.Catalog/DeleteBeer", func(w http.ResponseWriter, r *http.Request) {
		var in DeleteBeerReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBeer(ctx, req.(*DeleteBeerReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*DeleteBeerReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	return r
}

type CatalogHttpClient interface {
	CreateBeer(ctx context.Context, req *CreateBeerReq, opts ...http1.CallOption) (rsp *CreateBeerReply, err error)

	DeleteBeer(ctx context.Context, req *DeleteBeerReq, opts ...http1.CallOption) (rsp *DeleteBeerReply, err error)

	GetBeer(ctx context.Context, req *GetBeerReq, opts ...http1.CallOption) (rsp *GetBeerReply, err error)

	ListBeer(ctx context.Context, req *ListBeerReq, opts ...http1.CallOption) (rsp *ListBeerReply, err error)

	UpdateBeer(ctx context.Context, req *UpdateBeerReq, opts ...http1.CallOption) (rsp *UpdateBeerReply, err error)
}

type CatalogHttpClientImpl struct {
	cc *http1.Client
}

func NewCatalogHttpClient(client *http1.Client) CatalogHttpClient {
	return &CatalogHttpClientImpl{client}
}

func (c *CatalogHttpClientImpl) CreateBeer(ctx context.Context, in *CreateBeerReq, opts ...http1.CallOption) (out *CreateBeerReply, err error) {
	path := binding.EncodePath("POST", "/catalog.service.v1.Catalog/CreateBeer", in)
	out = &CreateBeerReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/catalog.service.v1.Catalog/CreateBeer"))

	if err != nil {
		return
	}
	return
}

func (c *CatalogHttpClientImpl) DeleteBeer(ctx context.Context, in *DeleteBeerReq, opts ...http1.CallOption) (out *DeleteBeerReply, err error) {
	path := binding.EncodePath("POST", "/catalog.service.v1.Catalog/DeleteBeer", in)
	out = &DeleteBeerReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/catalog.service.v1.Catalog/DeleteBeer"))

	if err != nil {
		return
	}
	return
}

func (c *CatalogHttpClientImpl) GetBeer(ctx context.Context, in *GetBeerReq, opts ...http1.CallOption) (out *GetBeerReply, err error) {
	path := binding.EncodePath("POST", "/catalog.service.v1.Catalog/GetBeer", in)
	out = &GetBeerReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/catalog.service.v1.Catalog/GetBeer"))

	if err != nil {
		return
	}
	return
}

func (c *CatalogHttpClientImpl) ListBeer(ctx context.Context, in *ListBeerReq, opts ...http1.CallOption) (out *ListBeerReply, err error) {
	path := binding.EncodePath("POST", "/catalog.service.v1.Catalog/ListBeer", in)
	out = &ListBeerReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/catalog.service.v1.Catalog/ListBeer"))

	if err != nil {
		return
	}
	return
}

func (c *CatalogHttpClientImpl) UpdateBeer(ctx context.Context, in *UpdateBeerReq, opts ...http1.CallOption) (out *UpdateBeerReply, err error) {
	path := binding.EncodePath("POST", "/catalog.service.v1.Catalog/UpdateBeer", in)
	out = &UpdateBeerReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/catalog.service.v1.Catalog/UpdateBeer"))

	if err != nil {
		return
	}
	return
}
