// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	mux "github.com/gorilla/mux"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(http.Request)
var _ = new(context.Context)
var _ = binding.MapProto
var _ = mux.NewRouter

const _ = http1.SupportPackageIsVersion1

type UserHandler interface {
	CreateAddress(context.Context, *CreateAddressReq) (*CreateAddressReply, error)

	CreateCard(context.Context, *CreateCardReq) (*CreateCardReply, error)

	CreateUser(context.Context, *CreateUserReq) (*CreateUserReply, error)

	DeleteCard(context.Context, *DeleteCardReq) (*DeleteCardReply, error)

	GetAddress(context.Context, *GetAddressReq) (*GetAddressReply, error)

	GetCard(context.Context, *GetCardReq) (*GetCardReply, error)

	GetUser(context.Context, *GetUserReq) (*GetUserReply, error)

	ListAddress(context.Context, *ListAddressReq) (*ListAddressReply, error)

	ListCard(context.Context, *ListCardReq) (*ListCardReply, error)

	VerifyPassword(context.Context, *VerifyPasswordReq) (*VerifyPasswordReply, error)
}

func NewUserHandler(srv UserHandler, opts ...http1.HandleOption) http.Handler {
	h := http1.DefaultHandleOptions()
	for _, o := range opts {
		o(&h)
	}
	r := mux.NewRouter()

	r.HandleFunc("/user.service.v1.User/GetUser", func(w http.ResponseWriter, r *http.Request) {
		var in GetUserReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*GetUserReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/user.service.v1.User/CreateUser", func(w http.ResponseWriter, r *http.Request) {
		var in CreateUserReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUser(ctx, req.(*CreateUserReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*CreateUserReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/user.service.v1.User/VerifyPassword", func(w http.ResponseWriter, r *http.Request) {
		var in VerifyPasswordReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifyPassword(ctx, req.(*VerifyPasswordReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*VerifyPasswordReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/user.service.v1.User/ListAddress", func(w http.ResponseWriter, r *http.Request) {
		var in ListAddressReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAddress(ctx, req.(*ListAddressReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*ListAddressReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/user.service.v1.User/CreateAddress", func(w http.ResponseWriter, r *http.Request) {
		var in CreateAddressReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAddress(ctx, req.(*CreateAddressReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*CreateAddressReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/user.service.v1.User/GetAddress", func(w http.ResponseWriter, r *http.Request) {
		var in GetAddressReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAddress(ctx, req.(*GetAddressReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*GetAddressReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/user.service.v1.User/ListCard", func(w http.ResponseWriter, r *http.Request) {
		var in ListCardReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCard(ctx, req.(*ListCardReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*ListCardReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/user.service.v1.User/CreateCard", func(w http.ResponseWriter, r *http.Request) {
		var in CreateCardReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCard(ctx, req.(*CreateCardReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*CreateCardReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/user.service.v1.User/GetCard", func(w http.ResponseWriter, r *http.Request) {
		var in GetCardReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCard(ctx, req.(*GetCardReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*GetCardReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/user.service.v1.User/DeleteCard", func(w http.ResponseWriter, r *http.Request) {
		var in DeleteCardReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCard(ctx, req.(*DeleteCardReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*DeleteCardReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	return r
}

type UserHttpClient interface {
	CreateAddress(ctx context.Context, req *CreateAddressReq, opts ...http1.CallOption) (rsp *CreateAddressReply, err error)

	CreateCard(ctx context.Context, req *CreateCardReq, opts ...http1.CallOption) (rsp *CreateCardReply, err error)

	CreateUser(ctx context.Context, req *CreateUserReq, opts ...http1.CallOption) (rsp *CreateUserReply, err error)

	DeleteCard(ctx context.Context, req *DeleteCardReq, opts ...http1.CallOption) (rsp *DeleteCardReply, err error)

	GetAddress(ctx context.Context, req *GetAddressReq, opts ...http1.CallOption) (rsp *GetAddressReply, err error)

	GetCard(ctx context.Context, req *GetCardReq, opts ...http1.CallOption) (rsp *GetCardReply, err error)

	GetUser(ctx context.Context, req *GetUserReq, opts ...http1.CallOption) (rsp *GetUserReply, err error)

	ListAddress(ctx context.Context, req *ListAddressReq, opts ...http1.CallOption) (rsp *ListAddressReply, err error)

	ListCard(ctx context.Context, req *ListCardReq, opts ...http1.CallOption) (rsp *ListCardReply, err error)

	VerifyPassword(ctx context.Context, req *VerifyPasswordReq, opts ...http1.CallOption) (rsp *VerifyPasswordReply, err error)
}

type UserHttpClientImpl struct {
	cc *http1.Client
}

func NewUserHttpClient(client *http1.Client) UserHttpClient {
	return &UserHttpClientImpl{client}
}

func (c *UserHttpClientImpl) CreateAddress(ctx context.Context, in *CreateAddressReq, opts ...http1.CallOption) (out *CreateAddressReply, err error) {
	path := binding.EncodePath("POST", "/user.service.v1.User/CreateAddress", in)
	out = &CreateAddressReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/user.service.v1.User/CreateAddress"))

	if err != nil {
		return
	}
	return
}

func (c *UserHttpClientImpl) CreateCard(ctx context.Context, in *CreateCardReq, opts ...http1.CallOption) (out *CreateCardReply, err error) {
	path := binding.EncodePath("POST", "/user.service.v1.User/CreateCard", in)
	out = &CreateCardReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/user.service.v1.User/CreateCard"))

	if err != nil {
		return
	}
	return
}

func (c *UserHttpClientImpl) CreateUser(ctx context.Context, in *CreateUserReq, opts ...http1.CallOption) (out *CreateUserReply, err error) {
	path := binding.EncodePath("POST", "/user.service.v1.User/CreateUser", in)
	out = &CreateUserReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/user.service.v1.User/CreateUser"))

	if err != nil {
		return
	}
	return
}

func (c *UserHttpClientImpl) DeleteCard(ctx context.Context, in *DeleteCardReq, opts ...http1.CallOption) (out *DeleteCardReply, err error) {
	path := binding.EncodePath("POST", "/user.service.v1.User/DeleteCard", in)
	out = &DeleteCardReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/user.service.v1.User/DeleteCard"))

	if err != nil {
		return
	}
	return
}

func (c *UserHttpClientImpl) GetAddress(ctx context.Context, in *GetAddressReq, opts ...http1.CallOption) (out *GetAddressReply, err error) {
	path := binding.EncodePath("POST", "/user.service.v1.User/GetAddress", in)
	out = &GetAddressReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/user.service.v1.User/GetAddress"))

	if err != nil {
		return
	}
	return
}

func (c *UserHttpClientImpl) GetCard(ctx context.Context, in *GetCardReq, opts ...http1.CallOption) (out *GetCardReply, err error) {
	path := binding.EncodePath("POST", "/user.service.v1.User/GetCard", in)
	out = &GetCardReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/user.service.v1.User/GetCard"))

	if err != nil {
		return
	}
	return
}

func (c *UserHttpClientImpl) GetUser(ctx context.Context, in *GetUserReq, opts ...http1.CallOption) (out *GetUserReply, err error) {
	path := binding.EncodePath("POST", "/user.service.v1.User/GetUser", in)
	out = &GetUserReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/user.service.v1.User/GetUser"))

	if err != nil {
		return
	}
	return
}

func (c *UserHttpClientImpl) ListAddress(ctx context.Context, in *ListAddressReq, opts ...http1.CallOption) (out *ListAddressReply, err error) {
	path := binding.EncodePath("POST", "/user.service.v1.User/ListAddress", in)
	out = &ListAddressReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/user.service.v1.User/ListAddress"))

	if err != nil {
		return
	}
	return
}

func (c *UserHttpClientImpl) ListCard(ctx context.Context, in *ListCardReq, opts ...http1.CallOption) (out *ListCardReply, err error) {
	path := binding.EncodePath("POST", "/user.service.v1.User/ListCard", in)
	out = &ListCardReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/user.service.v1.User/ListCard"))

	if err != nil {
		return
	}
	return
}

func (c *UserHttpClientImpl) VerifyPassword(ctx context.Context, in *VerifyPasswordReq, opts ...http1.CallOption) (out *VerifyPasswordReply, err error) {
	path := binding.EncodePath("POST", "/user.service.v1.User/VerifyPassword", in)
	out = &VerifyPasswordReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/user.service.v1.User/VerifyPassword"))

	if err != nil {
		return
	}
	return
}
