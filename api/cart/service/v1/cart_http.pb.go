// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	mux "github.com/gorilla/mux"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(http.Request)
var _ = new(context.Context)
var _ = binding.MapProto
var _ = mux.NewRouter

const _ = http1.SupportPackageIsVersion1

type CartHandler interface {
	AddItem(context.Context, *AddItemReq) (*AddItemReply, error)

	DeleteCart(context.Context, *DeleteCartReq) (*DeleteCartReply, error)

	DeleteItem(context.Context, *DeleteItemReq) (*DeleteItemReply, error)

	GetCart(context.Context, *GetCartReq) (*GetCartReply, error)

	UpdateItem(context.Context, *UpdateItemReq) (*UpdateItemReply, error)
}

func NewCartHandler(srv CartHandler, opts ...http1.HandleOption) http.Handler {
	h := http1.DefaultHandleOptions()
	for _, o := range opts {
		o(&h)
	}
	r := mux.NewRouter()

	r.HandleFunc("/cart.service.v1.Cart/GetCart", func(w http.ResponseWriter, r *http.Request) {
		var in GetCartReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCart(ctx, req.(*GetCartReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*GetCartReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/cart.service.v1.Cart/DeleteCart", func(w http.ResponseWriter, r *http.Request) {
		var in DeleteCartReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCart(ctx, req.(*DeleteCartReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*DeleteCartReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/cart.service.v1.Cart/AddItem", func(w http.ResponseWriter, r *http.Request) {
		var in AddItemReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddItem(ctx, req.(*AddItemReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*AddItemReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/cart.service.v1.Cart/UpdateItem", func(w http.ResponseWriter, r *http.Request) {
		var in UpdateItemReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateItem(ctx, req.(*UpdateItemReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*UpdateItemReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/cart.service.v1.Cart/DeleteItem", func(w http.ResponseWriter, r *http.Request) {
		var in DeleteItemReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteItem(ctx, req.(*DeleteItemReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*DeleteItemReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	return r
}

type CartHttpClient interface {
	AddItem(ctx context.Context, req *AddItemReq, opts ...http1.CallOption) (rsp *AddItemReply, err error)

	DeleteCart(ctx context.Context, req *DeleteCartReq, opts ...http1.CallOption) (rsp *DeleteCartReply, err error)

	DeleteItem(ctx context.Context, req *DeleteItemReq, opts ...http1.CallOption) (rsp *DeleteItemReply, err error)

	GetCart(ctx context.Context, req *GetCartReq, opts ...http1.CallOption) (rsp *GetCartReply, err error)

	UpdateItem(ctx context.Context, req *UpdateItemReq, opts ...http1.CallOption) (rsp *UpdateItemReply, err error)
}

type CartHttpClientImpl struct {
	cc *http1.Client
}

func NewCartHttpClient(client *http1.Client) CartHttpClient {
	return &CartHttpClientImpl{client}
}

func (c *CartHttpClientImpl) AddItem(ctx context.Context, in *AddItemReq, opts ...http1.CallOption) (out *AddItemReply, err error) {
	path := binding.EncodePath("POST", "/cart.service.v1.Cart/AddItem", in)
	out = &AddItemReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/cart.service.v1.Cart/AddItem"))

	if err != nil {
		return
	}
	return
}

func (c *CartHttpClientImpl) DeleteCart(ctx context.Context, in *DeleteCartReq, opts ...http1.CallOption) (out *DeleteCartReply, err error) {
	path := binding.EncodePath("POST", "/cart.service.v1.Cart/DeleteCart", in)
	out = &DeleteCartReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/cart.service.v1.Cart/DeleteCart"))

	if err != nil {
		return
	}
	return
}

func (c *CartHttpClientImpl) DeleteItem(ctx context.Context, in *DeleteItemReq, opts ...http1.CallOption) (out *DeleteItemReply, err error) {
	path := binding.EncodePath("POST", "/cart.service.v1.Cart/DeleteItem", in)
	out = &DeleteItemReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/cart.service.v1.Cart/DeleteItem"))

	if err != nil {
		return
	}
	return
}

func (c *CartHttpClientImpl) GetCart(ctx context.Context, in *GetCartReq, opts ...http1.CallOption) (out *GetCartReply, err error) {
	path := binding.EncodePath("POST", "/cart.service.v1.Cart/GetCart", in)
	out = &GetCartReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/cart.service.v1.Cart/GetCart"))

	if err != nil {
		return
	}
	return
}

func (c *CartHttpClientImpl) UpdateItem(ctx context.Context, in *UpdateItemReq, opts ...http1.CallOption) (out *UpdateItemReply, err error) {
	path := binding.EncodePath("POST", "/cart.service.v1.Cart/UpdateItem", in)
	out = &UpdateItemReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/cart.service.v1.Cart/UpdateItem"))

	if err != nil {
		return
	}
	return
}
